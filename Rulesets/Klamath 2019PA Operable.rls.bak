# RiverWare_Ruleset 8.0.5
# Created 10:56 June 24, 2020
# 
RULESET
NAME "Klamath 2019PA Ruleset";
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   2;
NOTES "";
BEGIN

  POLICY_GROUP   "Flood Release";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set IGD Flood Release";
    DESCRIPTION          "This rule sets the release from Iron Gate Dam that satifies flood control objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC Accretion = $ "Lake Ewuana Gain.Local Inflow" ["IGD Reference Date"( @"t" )] + $ "Keno to IGD Gain.Local Inflow" [@"t"] + "Accretion to IGD"( @"t", % "Lost River Diversion Channel" ) + "Accretion to IGD"( @"t", % "F and FF Pump" )) DO
            WITH_STATEMENT (NUMERIC PacifiCorpPayback = "VolumeToFlow"( $ "Dashboard.PacifiCorp Payback" [@"t"] - $ "Dashboard.PacifiCorp Borrow" [@"t"], @"t" )) DO
            WITH_STATEMENT (NUMERIC FloodRelease = "UKL River and Flood Release"( @"t" ) - PacifiCorpPayback + Accretion) DO
            IF_STATEMENT ($ "IGD.Outflow" [] < FloodRelease) THEN
            $ "IGD.Outflow" [] := FloodRelease;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{262fd5c9-f131-435c-b26c-9fb93a27de93}";;

    RULE                 "Set UKL Flood Release";
    DESCRIPTION          "This rule sets the release from Upper Klamath Lake that satifies flood control objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ("UKL for Flooding"( @"t" ) > 0.00000000 "cfs") THEN
            $ "UKL.Outflow" [] := "UKL River and Flood Release"( @"t" ) + "Total Ag from UKL"( @"t" ) + $ "Ady to Refuge.Diversion Request" [];

      END_IF_STATEMENT;

    END
    UUID "{a8a16855-e43b-40dc-bcaf-c4813867c4e0}";;

  END
  UUID "{20be2ae0-40ec-49ea-b748-400aa9732a9d}";;

  POLICY_GROUP   "Ramping and Minimums Release";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Ramping and Minimums IGD Release";
    DESCRIPTION          "This rule sets the Iron Gate Release at the floor release if it does not meet the minimum or ramping requirements.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC FloorRelease = IF ( IsNaN $ "Dashboard.Flex Release" [] )
 THEN
  "MaxItem"( { $ "IGD.Min Release Table" [@"t", "Min_1"] + $ "Dashboard.May June Augment" [] , $ "IGD.Target Release" [] + $ "Dashboard.May June Augment" [] , "IGD Ramping Release"( @"t" ) } )
 ELSE
  $ "Dashboard.Flex Release" []
 ENDIF COMMENTED_BY "Select the floor release. The Flex Release is an override and will be chosen if set.   <br>") DO
          DESCRIPTION          "To allow the rule to set the Iron Gate Scheduled Release, the Outflow cannot be set in the <br>observed period since it is already input.  <br>";
      IF_STATEMENT ($ "IGD.Outflow" [] < FloorRelease AND "Operations Period"( @"t" )) THEN
            $ "IGD.Outflow" [] := FloorRelease;

      END_IF_STATEMENT;

          DESCRIPTION          "Store the release as the Iron Gate Target Release for use in other computations <br>";
      $ "IGD.Scheduled Release" [] := FloorRelease;

      END_WITH_STATEMENT;

    END
    UUID "{cfa5d586-b680-4775-8049-fd2186dcb6d8}";;

  END
  UUID "{42b00f08-3792-48af-95a3-88af12a627bf}";;

  POLICY_GROUP   "Central Tendency Controlled Release";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set UKL Supply Diversion Control";
    DESCRIPTION          "This rule sets the agricultural diversions in the basin based on the supply provided by the release from Upper Klamath Lake for agricultural objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Operations Period"( @"t" )) THEN
          DESCRIPTION          "Perform the diversion control for A Canal, Miller Hill Pump, Station 48, Ady Canal, and North <br>Canal. <br>";
      FOREACH (OBJECT DiversionCanal IN "ListSubbasin"( "Major Canals and Pumps" )) DO
          DESCRIPTION          "Ady transports water for both Agricultural and Refuge demands. Needs to seperate the values <br>at certain points throughout the rule.   <br>";
      WITH_STATEMENT (NUMERIC Refuge = IF ( DiversionCanal == % "Ady Canal" )
 THEN
  $ "Ady to Refuge.Diversion Request" []
 ELSE
  0.00000000 "cfs"
 ENDIF) DO
          DESCRIPTION          "Since the Agricultural demand is the only demand limited, we need to exclude the Refuge <br>demand. <br>";
      WITH_STATEMENT (NUMERIC RefDiversion = DiversionCanal & "Diversion Request" [] - Refuge) DO
            DiversionCanal & "Diversion Request" [] := "Demand from Offset"( DiversionCanal, RefDiversion, @"t" ) + "Demand from UKL"( DiversionCanal, RefDiversion, @"t" ) + Refuge;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{92e87f60-9483-4592-8d89-438466628c20}";;

    RULE                 "Set Central Tendency IGD Release";
    DESCRIPTION          "This rule sets the release from Iron Gate Dam so that it adheres to a reduction that keeps the storage from diverging too far from the central tendency. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC BaseRelease = IF ( "Spawn Release Switch"( @"t" ) )
 THEN
  $ "IGD.Spawn Release" [] + $ "IGD.Spawn Release" [] * $ "UKL.Storage Diff Ratio 5 Day" ["UKL to IGD Lag"( @"t" )]
 ELSE
  $ "UKL.Summer Release" [] + $ "UKL.Summer Release" [] * $ "UKL.Storage Diff Ratio 5 Day" ["UKL to IGD Lag"( @"t" )]
 ENDIF
 ELSEIF_COND ( "Fill Release Switch"( @"t" ) )
 ELSEIF_CLAUSE ( $ "UKL.Fill Release" [] + $ "UKL.Fill Release" [] * $ "UKL.Storage Diff Ratio 5 Day" ["UKL to IGD Lag"( @"t" )] )
 END_ELSEIF
 ELSEIF_COND ( "Spring Release Switch"( @"t" ) )
 ELSEIF_CLAUSE ( $ "UKL.Spring Release" [] + $ "UKL.Spring Release" [] * $ "UKL.Storage Diff Ratio 5 Day" ["UKL to IGD Lag"( @"t" )] )
 END_ELSEIF COMMENTED_BY "Differs by season. <br>") DO
            WITH_STATEMENT (NUMERIC ControlledRelease = "Min"( "Environmental Release Upper Bound"( @"t" ), BaseRelease + "Environmental Accretion"( @"t" ) )) DO
          DESCRIPTION          "To allow the rule to set the Iron Gate Target Release, the Outflow cannot be set in the observed <br>period since it is already input. <br>";
      IF_STATEMENT ("Operations Period"( @"t" ) AND $ "IGD.Outflow" [] > ControlledRelease) THEN
            $ "IGD.Outflow" [] := ControlledRelease;

      END_IF_STATEMENT;

          DESCRIPTION          "Store the release as the Iron Gate Target Release for use in other computations <br>";
      $ "IGD.Target Release" [] := ControlledRelease;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

    END
    UUID "{246a9634-bf44-416e-86c0-92b551a2d3da}";;

    RULE                 "Set Central Tendency Diversion Control";
    DESCRIPTION          "This rule sets the max diversion for each canal in Area 2. It includes consideration for both agricultural and refuge demands.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Operations Period"( @"t" ) AND "OctoberThruFebruary"( @"t" )) THEN
            FOREACH (OBJECT DiversionObj IN { % "Ady Canal" , % "North Canal" , % "Ady to Refuge" }) DO
            WITH_STATEMENT (NUMERIC ControlledRequest = "Controlled Ag Demand"( DiversionObj, @"t" ) * "Seasonal Adj"( DiversionObj, @"t" ) + "Controlled Refuge Demand"( DiversionObj, @"t" )) DO
            IF_STATEMENT (DiversionObj & "Diversion Request" [] > ControlledRequest) THEN
            DiversionObj & "Diversion Request" [] := ControlledRequest;

      END_IF_STATEMENT;

      END_WITH_STATEMENT;

      ENDFOREACH;

      END_IF_STATEMENT;

    END
    UUID "{e7a36621-4c5d-48fd-be0b-922672839bf3}";;

    RULE                 "Compute Storage Diff Ratio 5-Day";
    DESCRIPTION          "This rule computes the storage difference ratio that controls the Upper Klamath Lake and Iron Gate Dam releases.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "UKL.Storage Diff Ratio 5 Day" [] := IF ( "Five Day Period"( @"t" ) == "Five Day Period"( @"t - 1" ) )
 THEN
  $ "UKL.Storage Diff Ratio 5 Day" [@"t - 1"]
 ELSE
  "Storage Diff Ratio"( @"t" )
 ENDIF COMMENTED_BY "Apply a new storage difference ratio every five days, the first period starts on October 1st. <br>";

    END
    UUID "{7583b82b-036a-4f30-b932-a066f55eaad4}";;

    RULE                 "Compute PacifiCorp Balance";
    DESCRIPTION          "This rule computes teh cumulative volume that Reclamation owes to PacficiCorp. It is given a negative value since it is tracked as a debt.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Dashboard.PacifiCorp Balance" [] := $ "Dashboard.PacifiCorp Balance" [@"t - 1"] - $ "Dashboard.PacifiCorp Borrow" [] + $ "Dashboard.PacifiCorp Payback" [];

    END
    UUID "{f7e22380-8992-4152-950d-53a03e4eaeb9}";;

  END
  UUID "{8d4dd16f-3af6-4b10-b190-e83fe3645483}";;

  POLICY_GROUP   "Environmental Release";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Environmental UKL Release";
    DESCRIPTION          "This rule sets the release from Upper Klamath Lake that satifies environmental objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      IF_STATEMENT ("UKL Release to River"( @"t" ) > 0.00000000 "cfs") THEN
            $ "UKL.Outflow" [] := "UKL Release to River"( @"t" ) + "Ag Release from UKL"( @"t" ) + $ "Ady to Refuge.Diversion Request" [];

      END_IF_STATEMENT;

    END
    UUID "{bd0728ed-c3d5-4b56-b93f-6718ea1fc34a}";;

    RULE                 "Set Environmental IGD Release";
    DESCRIPTION          "This rule sets the release from Iron Gate Dam that satifies environmental objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC BaseRelease = IF ( "Spawn Release Switch"( @"t" ) )
 THEN
  $ "IGD.Spawn Release" []
 ELSE
  $ "UKL.Summer Release" []
 ENDIF
 ELSEIF_COND ( "Fill Release Switch"( @"t" ) )
 ELSEIF_CLAUSE ( $ "UKL.Fill Release" [] )
 END_ELSEIF
 ELSEIF_COND ( "Spring Release Switch"( @"t" ) )
 ELSEIF_CLAUSE ( $ "UKL.Spring Release" [] )
 END_ELSEIF) DO
            $ "IGD.Outflow" [] := "Min"( "Environmental Release Upper Bound"( @"t" ), BaseRelease + "Environmental Accretion"( @"t" ) );

      END_WITH_STATEMENT;

    END
    UUID "{94962ef8-c19f-43ce-a574-0ba8a754a36e}";;

    RULE                 "Compute Summer Release";
    DESCRIPTION          "This rule computes the release rate that meets the summer criteria, which is to distribute the remaining EWA volume from Upper Klamath Lake by the end of the summer.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Summer Release Switch"( @"t" )) THEN
            $ "UKL.Summer Release" [] := "EWA Remain Jul-Sep"( @"t" ) / "GetDaysInMonth"( @"t" );

      END_IF_STATEMENT;

    END
    UUID "{18899251-d78c-42dc-aad6-249bc288b21b}";;

    RULE                 "Compute Spring Release";
    DESCRIPTION          "This rule computes release rate that meets the spring criteria, which is to preserve storage at Upper Klamath Lake while also satisfying basin objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Spring Release Switch"( @"t" )) THEN
            WITH_STATEMENT (NUMERIC EWA = "TableLookup"( $ "Dashboard.EWA", 0.00000000, 1.00000000, "DateToNumber"( @"t" ), @"t", FALSE, 1.00000000 )) DO
            $ "UKL.Spring Release" [] := "Max"( 0.00000000 "cfs", ( "VolumeToFlow"( EWA - $ "Constants.Spring Release" [] - $ "Dashboard.Boat Dance Supply" [], @"t" ) - $ "UKL.Release Difference" [] ) * "Percent of March 50 Volume"( @"t" ) );

      END_WITH_STATEMENT;

      ELSE
            $ "UKL.Spring Release" [] := 0.00000000 "cfs";

      END_IF_STATEMENT;

    END
    UUID "{5f1c9361-ca05-485c-b8f5-476333ea5a9f}";;

    RULE                 "Compute Fill Release";
    DESCRIPTION          "This rule computes the release rate that meets filling criteria, which is to reach the target elevation at Upper Klamath Lake.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Fill Release Switch"( @"t" )) THEN
            $ "UKL.Fill Release" [] := "Max"( 0.00000000 "cfs", $ "UKL.Smoothed Inflow" [] - "Needed Fill Rate"( @"t" ) * $ "Constants.Fill Release" [] );

      END_IF_STATEMENT;

    END
    UUID "{290f9a3c-67e5-4236-a4d7-ff9aed364d8d}";;

    RULE                 "Compute IGD Spawn Release";
    DESCRIPTION          "This rule computes the release rate that meets spawing criteria, which is to send enough water from Iron Gate Dam to create spawining habitat for ESA listed fish. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("Spawn Release Switch"( @"t" )) THEN
            WITH_STATEMENT (NUMERIC BaseRelease = IF ( @"t" == "CompletePartialDate"( "NumberToDate"( $ "Dashboard.Spawn Operation Dates" ["Start", "Date"] ), @"t" ) )
 THEN
  $ "Constants.IGD Spawn Release" ["Constant", "C1"] + $ "Constants.IGD Spawn Release" ["Constant", "C2"] * "Normalized 60-Day Average Inflow"( @"t" )
 ELSE
  $ "IGD.Spawn Release" [@"t - 1"]
 ENDIF COMMENTED_BY "The base spawn release is computed with an equation on October first. <br>Otherwise, it uses the previous day's value as the base spawn release for the <br>rest of the spawing period.  <br>") DO
            $ "IGD.Spawn Release" [@"t"] := BaseRelease + "IGD Spawn Release Increase"( @"t" );

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{e3846160-21d3-41fa-b96c-70a6d4b7b416}";;

    RULE                 "Compute EWA Remain";
    DESCRIPTION          "This rule computes the remaining volume per month that can be allocated for environmental objectives. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      IF_STATEMENT ("MarchThruSeptember"( @"t" )) THEN
            WITH_STATEMENT (NUMERIC EWA = "TableLookup"( $ "Dashboard.EWA", 0.00000000, 1.00000000, "DateToNumber"( @"t" ), @"t", FALSE, 1.00000000 )) DO
            WITH_STATEMENT (NUMERIC Augment = IF ( "JulyThruSeptember"( @"t" ) )
 THEN
  "TableLookup"( $ "Dashboard.Supply Considerations", 0.00000000, 2.00000000, "DateToNumber"( @"t" ), @"t", FALSE, 1.00000000 )
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Only apply the augment after June. <br>") DO
            WITH_STATEMENT (NUMERIC Remain = IF ( "GetDayOfMonth"( @"t" ) > 1.00000000 "day" )
 THEN
  $ "Dashboard.EWA Remain" [@"t - 1"]
 ELSE
  EWA - $ "Dashboard.EWA Used thru Yesterday" [] + Augment
 ENDIF COMMENTED_BY "Compute a new value only on the first of every month from March thru September <br>") DO
            $ "Dashboard.EWA Remain" [] := "Max"( Remain, "EWA Remain Min"( @"t" ) );

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_WITH_STATEMENT;

      END_IF_STATEMENT;

    END
    UUID "{6b76f49e-6cb1-40a1-b025-46d208f10bf0}";;

    RULE                 "Compute EWA Used thru Yesterday";
    DESCRIPTION          "This rule computes the cumulative Environmental Water Account volume that has been used through the previous day.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC FloodRelease = IF ( "Operations Period"( @"t - 1" ) )
 THEN
  "FlowToVolume"( "UKL for Flooding"( @"t - 1" ), @"t" )
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Include the flood release during the forecast period. Already counted in the observed, thus set <br>to zero then. <br>") DO
            $ "Dashboard.EWA Used thru Yesterday" [] := IF ( "MarchThruSeptember"( @"t - 1" ) )
 THEN
  "FlowToVolume"( "UKL Release to River"( @"t - 1" ) + "Yesterday's Project Credit Accretion"( @"t" ) - "Yesterday's Project Credit Spill"( @"t" ), @"t" ) + $ "Dashboard.EWA Used thru Yesterday" [@"t - 1"] + FloodRelease
 ELSE
  0.00000000 "acre-ft"
 ENDIF COMMENTED_BY "Only computed in the Spring/Summer season. <br>";

      END_WITH_STATEMENT;

    END
    UUID "{abe273f7-f795-4f80-bffa-d937f66f490d}";;

    RULE                 "Compute Link Release Difference";
    DESCRIPTION          "This rule computes the difference in the Spring Release between the current and previous timestep, which also includes considerations for UKL Credit, Augment flows, and PacifiCorp Payback.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      WITH_STATEMENT (NUMERIC PrevLinkRelease = IF ( "Operations Period"( @"t - 1" ) )
 THEN
  "UKL River and Flood Release"( @"t - 1" )
 ELSE
  "Obs Link Release to River"( @"t - 1" )
 ENDIF) DO
            $ "UKL.Release Difference" [] := IF ( "Spring Release Switch"( @"t" ) )
 THEN
  PrevLinkRelease - "VolumeToFlow"( $ "Dashboard.PacifiCorp Payback" [@"t - 1"] - $ "Dashboard.PacifiCorp Borrow" [@"t - 1"], @"t" ) - "Yesterday's Project Credit Spill"( @"t" ) + "Yesterday's Project Credit Accretion"( @"t" ) - $ "UKL.Spring Release" [@"t - 1"] + $ "UKL.Release Difference" [@"t - 1"] - $ "Dashboard.May June Augment" [@"t - 1"]
 ELSE
  0.00000000 "cfs"
 ENDIF;

      END_WITH_STATEMENT;

    END
    UUID "{d7e684a4-0bff-4438-ad6d-cbec106c6c42}";;

    RULE                 "Compute UKL Credit";
    DESCRIPTION          "This rule computes the cumulative accrued credit water available for basin objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "UKL.Credit" [] := IF ( "Fall/Winter Ops"( @"t" ) )
 THEN
  0.00000000 "acre-feet"
 ELSE
  "Max"( 0.00000000 "acre-feet", $ "UKL.Credit" [@"t - 1"] + "FlowToVolume"( "Yesterday's Project Credit Accretion"( @"t" ) - "Yesterday's Project Credit Spill"( @"t" ) - "Total Ag from UKL"( @"t - 1" ), @"t" ) ) COMMENTED_BY "Only calculate during the Spring/Summer season. It is a cumulative volume that resets every <br>year. It cannot be a negative volume.  <br>"
 ENDIF;

    END
    UUID "{f2eb65bb-c878-4df4-b56d-0406affe1c17}";;

  END
  UUID "{5ef18d89-f4db-447b-aeeb-d041c51a2f4e}";;

  POLICY_GROUP   "Project Supply";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Set Klamath to LRDC";
    DESCRIPTION          "This rule sets the diversion from the Klamath River to the LRDC that is necessary when the agricultural demands on the LRDC section exceed the supply from the Lost River System. ";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

    DESCRIPTION          "Check if the LRDC has enough water to meet the agricultural demand at Miller Hill Pump and <br>Station 48. Also, ensure that there is enough supply from the joint sources of UKL and the Lost <br>River so that the function does not get stuck in a loop.<br>";
      IF_STATEMENT ($ "Station 48.Diversion Request" [] + $ "Miller Hill Pump.Diversion Request" [] > $ "Lost River Diversion Channel.Outflow" [] AND $ "Station 48.Diversion Request" [] + $ "Miller Hill Pump.Diversion Request" [] < $ "UKL.Outflow" [] + $ "Lost River Diversion Channel.Inflow" []) THEN
          DESCRIPTION          "When there is a shortage, divert some of the release from UKL to the LRDC to make up for the <br>difference <br>";
      $ "Div To LRDC.Diversion Request" [] := $ "Miller Hill Pump.Diversion Request" [] + $ "Station 48.Diversion Request" [] - $ "Lost River Diversion Channel.Outflow" [];

      END_IF_STATEMENT;

    END
    UUID "{2aa3dbb3-3776-48e5-b898-5d36448ce375}";;

    RULE                 "Set Project Supply UKL Release";
    DESCRIPTION          "This rule sets the release from Upper Klamath Lake that satifies agricultural objectives.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
  NAMES_COLOR  "#0000ff";
    NOTES                "";
    BEGIN

      $ "UKL.Outflow" [] := "Ag Release from UKL"( @"t" );

    END
    UUID "{1a98ad2a-70d6-47b8-891e-b9300dea9f8a}";;

  END
  UUID "{35ef8fde-25f1-4c71-9dee-fe5a7bb787e5}";;

  POLICY_GROUP   "UKL Inflow Processing";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Compute Smoothed Inflow";
    DESCRIPTION          "This rule computes the smoothed inflow at Upper Klamath Lake. Since the raw inflow is computed from a mass balance, the values tend to vary greatly across the run period. This equation smooths the inflow so it show a more consistent curve when plotted.";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "Could this be an expression slot?<br>This will need an initialization rule to set the value on the initial timestep. Could also be an input by the operator.";
    BEGIN

      $ "UKL.Smoothed Inflow" [] := $ "UKL.Smoothed Inflow" [@"t - 1"] + $ "Constants.Smoothed Inflow" [] * ( $ "UKL.Inflow" [@"t - 1"] - $ "UKL.Smoothed Inflow" [@"t - 1"] );

    END
    UUID "{83761187-f167-4fec-a0be-6840be1956a5}";;

  END
  UUID "{3d90aad5-60de-4815-9db3-71af962fc216}";;

END
UUID "{90540622-7697-4477-9129-1658170b6e97}";
